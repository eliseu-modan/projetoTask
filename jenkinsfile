pipeline {
    agent any


    stages {
        stage('Iniciando a aplicação - docker-compose') {
            steps {
                script {
                    // Iniciar o ambiente do Docker Compose
                    sh 'docker-compose up --build -d'
                }
            }
        }



        stage('Escaneando a qualidade do código - SonarQube') {
            steps {
                script {
                    scannerHome = tool 'sonar-scanner';
                }
                withSonarQubeEnv('sonar-server') {
                    sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=app -Dsonar.sources=. -Dsonar.host.url=${env.SONAR_HOST_URL} -Dsonar.login=${env.SONAR_AUTH_TOKEN}"
                }
            }
        }
 

        

        stage('Criando diretório - docker') {
            steps {
                script {
                    def dockerfileContent = """
                        # Dockerfile.combined gerado dinamicamente
                        FROM backend
                        COPY ./combined /app
                    """
                    def dockerfilePath = "${env.WORKSPACE}/Dockerfile.combined"

                    // Verifica se o arquivo existe e o exclui se existir
                    if (fileExists(dockerfilePath)) {
                        sh "rm ${dockerfilePath}"
                    }

                    // Cria o novo Dockerfile.combined
                    writeFile file: dockerfilePath, text: dockerfileContent
                }
            }
        }

        stage('Empacotando aplicação - docker') {
            steps {
                script {
                    // Construir o backend
                    sh 'docker buildx build -t backend -f Dockerfile.backend .'
                    
                    // Construir o frontend
                    sh 'docker buildx build -t frontend -f Dockerfile.frontend .'
                    
                    // Criar contêineres temporários para cópia de artefatos
                    sh 'docker create --name fronte frontend'
                    sh 'docker create --name backe backend'
                    
                    // Copiar artefatos do frontend e do backend para o diretório 'combined'
                    sh 'docker cp fronte:/frontend/ combined'
                    sh 'docker cp backe:/backend/ combined'
                    
                    // Construir a imagem combinada
                    sh 'docker build -t combined -f Dockerfile.combined .'
                    
                    // Remover contêineres temporários
                    sh 'docker rm fronte backe'
                    
                    }
                }
            
        }
                 stage('upload docker image'){
                      steps{
                         script{
                           withCredentials([usernamePassword(credentialsId: 'nexus_user', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                             sh 'docker login -u $USERNAME -p $PASSWORD ${NEXUS_URL}'
                             sh 'docker tag app:latest ${NEXUS_URL}/app'
                             sh 'docker push ${NEXUS_URL}/app'
                        }
                      }
                    }
                 }


 }

}






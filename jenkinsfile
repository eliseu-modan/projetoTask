pipeline {
    agent any
    stages {
        stage('Criar Dockerfile.combined') {
            steps {
                script {
                    def dockerfileContent = """
                        # Dockerfile.combined gerado dinamicamente
                        FROM backend
                        COPY ./combined /app
                    """
                    def dockerfilePath = "${env.WORKSPACE}/Dockerfile.combined"

                    // Verifica se o arquivo existe e o exclui se existir
                    if (fileExists(dockerfilePath)) {
                        sh "rm ${dockerfilePath}"
                    }

                    // Cria o novo Dockerfile.combined
                    writeFile file: dockerfilePath, text: dockerfileContent
                }
            }
        }

        stage('Build da imagem Docker') {
            steps {
                script {
                    // Construir o backend
                    sh 'docker buildx build -t backend -f Dockerfile.backend .'
                    
                    // Construir o frontend
                    sh 'docker buildx build -t frontend -f Dockerfile.frontend .'
                    
                    // Criar contêineres temporários para cópia de artefatos
                    sh 'docker create --name fronte frontend'
                    sh 'docker create --name backe backend'
                    
                    // Copiar artefatos do frontend e do backend para o diretório 'combined'
                    sh 'docker cp fronte:/frontend/ combined'
                    sh 'docker cp backe:/backend/ combined'
                    
                    // Construir a imagem combinada
                    sh 'docker build -t combined -f Dockerfile.combined .'
                    
                    // Remover contêineres temporários
                    sh 'docker rm fronte backe'
                }
            }
        }

        stage('Subir docker compose - tasks') {
            steps {
                script {
                    sh 'docker-compose up --build -d'
                }
            }
        }

        stage('Aguardar subida dos containers') {
            steps {
                script {
                    sh 'sleep 10'
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    // Adapte o caminho do script conforme necessário
                    sh './teste.sh'
                }
            }
        }





      stage('Sonarqube validation'){
         steps{
            script {
                 scannerHome = tool 'sonar-scanner';
              }
            withSonarQubeEnv('sonar-server'){
                 sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=tasks -Dsonar.sources=. -Dsonar.host.url=${env.SONAR_HOST_URL} -Dsonar.login=${env.SONAR_AUTH_TOKEN}"
            }
       }

}
    stage('Quality Gate'){
        steps{
            withForQualityGate abortPipeline: false
        }
    }
 


    }
}


/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model CreateMessages
 * 
 */
export type CreateMessages = $Result.DefaultSelection<Prisma.$CreateMessagesPayload>
/**
 * Model CreateUser
 * 
 */
export type CreateUser = $Result.DefaultSelection<Prisma.$CreateUserPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more CreateMessages
 * const createMessages = await prisma.createMessages.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more CreateMessages
   * const createMessages = await prisma.createMessages.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.createMessages`: Exposes CRUD operations for the **CreateMessages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CreateMessages
    * const createMessages = await prisma.createMessages.findMany()
    * ```
    */
  get createMessages(): Prisma.CreateMessagesDelegate<ExtArgs>;

  /**
   * `prisma.createUser`: Exposes CRUD operations for the **CreateUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CreateUsers
    * const createUsers = await prisma.createUser.findMany()
    * ```
    */
  get createUser(): Prisma.CreateUserDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.7.1
   * Query Engine version: 0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    CreateMessages: 'CreateMessages',
    CreateUser: 'CreateUser'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'createMessages' | 'createUser'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      CreateMessages: {
        payload: Prisma.$CreateMessagesPayload<ExtArgs>
        fields: Prisma.CreateMessagesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CreateMessagesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateMessagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CreateMessagesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateMessagesPayload>
          }
          findFirst: {
            args: Prisma.CreateMessagesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateMessagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CreateMessagesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateMessagesPayload>
          }
          findMany: {
            args: Prisma.CreateMessagesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateMessagesPayload>[]
          }
          create: {
            args: Prisma.CreateMessagesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateMessagesPayload>
          }
          createMany: {
            args: Prisma.CreateMessagesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CreateMessagesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateMessagesPayload>
          }
          update: {
            args: Prisma.CreateMessagesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateMessagesPayload>
          }
          deleteMany: {
            args: Prisma.CreateMessagesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CreateMessagesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CreateMessagesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateMessagesPayload>
          }
          aggregate: {
            args: Prisma.CreateMessagesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCreateMessages>
          }
          groupBy: {
            args: Prisma.CreateMessagesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CreateMessagesGroupByOutputType>[]
          }
          count: {
            args: Prisma.CreateMessagesCountArgs<ExtArgs>,
            result: $Utils.Optional<CreateMessagesCountAggregateOutputType> | number
          }
        }
      }
      CreateUser: {
        payload: Prisma.$CreateUserPayload<ExtArgs>
        fields: Prisma.CreateUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CreateUserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CreateUserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateUserPayload>
          }
          findFirst: {
            args: Prisma.CreateUserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CreateUserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateUserPayload>
          }
          findMany: {
            args: Prisma.CreateUserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateUserPayload>[]
          }
          create: {
            args: Prisma.CreateUserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateUserPayload>
          }
          createMany: {
            args: Prisma.CreateUserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CreateUserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateUserPayload>
          }
          update: {
            args: Prisma.CreateUserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateUserPayload>
          }
          deleteMany: {
            args: Prisma.CreateUserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CreateUserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CreateUserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CreateUserPayload>
          }
          aggregate: {
            args: Prisma.CreateUserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCreateUser>
          }
          groupBy: {
            args: Prisma.CreateUserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CreateUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.CreateUserCountArgs<ExtArgs>,
            result: $Utils.Optional<CreateUserCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CreateUserCountOutputType
   */

  export type CreateUserCountOutputType = {
    messages: number
  }

  export type CreateUserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | CreateUserCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes

  /**
   * CreateUserCountOutputType without action
   */
  export type CreateUserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUserCountOutputType
     */
    select?: CreateUserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CreateUserCountOutputType without action
   */
  export type CreateUserCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CreateMessagesWhereInput
  }



  /**
   * Models
   */

  /**
   * Model CreateMessages
   */

  export type AggregateCreateMessages = {
    _count: CreateMessagesCountAggregateOutputType | null
    _avg: CreateMessagesAvgAggregateOutputType | null
    _sum: CreateMessagesSumAggregateOutputType | null
    _min: CreateMessagesMinAggregateOutputType | null
    _max: CreateMessagesMaxAggregateOutputType | null
  }

  export type CreateMessagesAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type CreateMessagesSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type CreateMessagesMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    subject: string | null
    userId: number | null
  }

  export type CreateMessagesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    subject: string | null
    userId: number | null
  }

  export type CreateMessagesCountAggregateOutputType = {
    id: number
    name: number
    email: number
    subject: number
    userId: number
    _all: number
  }


  export type CreateMessagesAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type CreateMessagesSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type CreateMessagesMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    subject?: true
    userId?: true
  }

  export type CreateMessagesMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    subject?: true
    userId?: true
  }

  export type CreateMessagesCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    subject?: true
    userId?: true
    _all?: true
  }

  export type CreateMessagesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CreateMessages to aggregate.
     */
    where?: CreateMessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreateMessages to fetch.
     */
    orderBy?: CreateMessagesOrderByWithRelationInput | CreateMessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CreateMessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreateMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreateMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CreateMessages
    **/
    _count?: true | CreateMessagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CreateMessagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CreateMessagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CreateMessagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CreateMessagesMaxAggregateInputType
  }

  export type GetCreateMessagesAggregateType<T extends CreateMessagesAggregateArgs> = {
        [P in keyof T & keyof AggregateCreateMessages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCreateMessages[P]>
      : GetScalarType<T[P], AggregateCreateMessages[P]>
  }




  export type CreateMessagesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CreateMessagesWhereInput
    orderBy?: CreateMessagesOrderByWithAggregationInput | CreateMessagesOrderByWithAggregationInput[]
    by: CreateMessagesScalarFieldEnum[] | CreateMessagesScalarFieldEnum
    having?: CreateMessagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CreateMessagesCountAggregateInputType | true
    _avg?: CreateMessagesAvgAggregateInputType
    _sum?: CreateMessagesSumAggregateInputType
    _min?: CreateMessagesMinAggregateInputType
    _max?: CreateMessagesMaxAggregateInputType
  }

  export type CreateMessagesGroupByOutputType = {
    id: number
    name: string
    email: string
    subject: string
    userId: number | null
    _count: CreateMessagesCountAggregateOutputType | null
    _avg: CreateMessagesAvgAggregateOutputType | null
    _sum: CreateMessagesSumAggregateOutputType | null
    _min: CreateMessagesMinAggregateOutputType | null
    _max: CreateMessagesMaxAggregateOutputType | null
  }

  type GetCreateMessagesGroupByPayload<T extends CreateMessagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CreateMessagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CreateMessagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CreateMessagesGroupByOutputType[P]>
            : GetScalarType<T[P], CreateMessagesGroupByOutputType[P]>
        }
      >
    >


  export type CreateMessagesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    subject?: boolean
    userId?: boolean
    user?: boolean | CreateMessages$userArgs<ExtArgs>
  }, ExtArgs["result"]["createMessages"]>

  export type CreateMessagesSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    subject?: boolean
    userId?: boolean
  }

  export type CreateMessagesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | CreateMessages$userArgs<ExtArgs>
  }


  export type $CreateMessagesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CreateMessages"
    objects: {
      user: Prisma.$CreateUserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      subject: string
      userId: number | null
    }, ExtArgs["result"]["createMessages"]>
    composites: {}
  }


  type CreateMessagesGetPayload<S extends boolean | null | undefined | CreateMessagesDefaultArgs> = $Result.GetResult<Prisma.$CreateMessagesPayload, S>

  type CreateMessagesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CreateMessagesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CreateMessagesCountAggregateInputType | true
    }

  export interface CreateMessagesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CreateMessages'], meta: { name: 'CreateMessages' } }
    /**
     * Find zero or one CreateMessages that matches the filter.
     * @param {CreateMessagesFindUniqueArgs} args - Arguments to find a CreateMessages
     * @example
     * // Get one CreateMessages
     * const createMessages = await prisma.createMessages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CreateMessagesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CreateMessagesFindUniqueArgs<ExtArgs>>
    ): Prisma__CreateMessagesClient<$Result.GetResult<Prisma.$CreateMessagesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CreateMessages that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CreateMessagesFindUniqueOrThrowArgs} args - Arguments to find a CreateMessages
     * @example
     * // Get one CreateMessages
     * const createMessages = await prisma.createMessages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CreateMessagesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CreateMessagesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CreateMessagesClient<$Result.GetResult<Prisma.$CreateMessagesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CreateMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreateMessagesFindFirstArgs} args - Arguments to find a CreateMessages
     * @example
     * // Get one CreateMessages
     * const createMessages = await prisma.createMessages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CreateMessagesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CreateMessagesFindFirstArgs<ExtArgs>>
    ): Prisma__CreateMessagesClient<$Result.GetResult<Prisma.$CreateMessagesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CreateMessages that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreateMessagesFindFirstOrThrowArgs} args - Arguments to find a CreateMessages
     * @example
     * // Get one CreateMessages
     * const createMessages = await prisma.createMessages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CreateMessagesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CreateMessagesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CreateMessagesClient<$Result.GetResult<Prisma.$CreateMessagesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CreateMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreateMessagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CreateMessages
     * const createMessages = await prisma.createMessages.findMany()
     * 
     * // Get first 10 CreateMessages
     * const createMessages = await prisma.createMessages.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const createMessagesWithIdOnly = await prisma.createMessages.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CreateMessagesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CreateMessagesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreateMessagesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CreateMessages.
     * @param {CreateMessagesCreateArgs} args - Arguments to create a CreateMessages.
     * @example
     * // Create one CreateMessages
     * const CreateMessages = await prisma.createMessages.create({
     *   data: {
     *     // ... data to create a CreateMessages
     *   }
     * })
     * 
    **/
    create<T extends CreateMessagesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CreateMessagesCreateArgs<ExtArgs>>
    ): Prisma__CreateMessagesClient<$Result.GetResult<Prisma.$CreateMessagesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CreateMessages.
     *     @param {CreateMessagesCreateManyArgs} args - Arguments to create many CreateMessages.
     *     @example
     *     // Create many CreateMessages
     *     const createMessages = await prisma.createMessages.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CreateMessagesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CreateMessagesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CreateMessages.
     * @param {CreateMessagesDeleteArgs} args - Arguments to delete one CreateMessages.
     * @example
     * // Delete one CreateMessages
     * const CreateMessages = await prisma.createMessages.delete({
     *   where: {
     *     // ... filter to delete one CreateMessages
     *   }
     * })
     * 
    **/
    delete<T extends CreateMessagesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CreateMessagesDeleteArgs<ExtArgs>>
    ): Prisma__CreateMessagesClient<$Result.GetResult<Prisma.$CreateMessagesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CreateMessages.
     * @param {CreateMessagesUpdateArgs} args - Arguments to update one CreateMessages.
     * @example
     * // Update one CreateMessages
     * const createMessages = await prisma.createMessages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CreateMessagesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CreateMessagesUpdateArgs<ExtArgs>>
    ): Prisma__CreateMessagesClient<$Result.GetResult<Prisma.$CreateMessagesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CreateMessages.
     * @param {CreateMessagesDeleteManyArgs} args - Arguments to filter CreateMessages to delete.
     * @example
     * // Delete a few CreateMessages
     * const { count } = await prisma.createMessages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CreateMessagesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CreateMessagesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CreateMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreateMessagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CreateMessages
     * const createMessages = await prisma.createMessages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CreateMessagesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CreateMessagesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CreateMessages.
     * @param {CreateMessagesUpsertArgs} args - Arguments to update or create a CreateMessages.
     * @example
     * // Update or create a CreateMessages
     * const createMessages = await prisma.createMessages.upsert({
     *   create: {
     *     // ... data to create a CreateMessages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CreateMessages we want to update
     *   }
     * })
    **/
    upsert<T extends CreateMessagesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CreateMessagesUpsertArgs<ExtArgs>>
    ): Prisma__CreateMessagesClient<$Result.GetResult<Prisma.$CreateMessagesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CreateMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreateMessagesCountArgs} args - Arguments to filter CreateMessages to count.
     * @example
     * // Count the number of CreateMessages
     * const count = await prisma.createMessages.count({
     *   where: {
     *     // ... the filter for the CreateMessages we want to count
     *   }
     * })
    **/
    count<T extends CreateMessagesCountArgs>(
      args?: Subset<T, CreateMessagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CreateMessagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CreateMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreateMessagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CreateMessagesAggregateArgs>(args: Subset<T, CreateMessagesAggregateArgs>): Prisma.PrismaPromise<GetCreateMessagesAggregateType<T>>

    /**
     * Group by CreateMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreateMessagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CreateMessagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CreateMessagesGroupByArgs['orderBy'] }
        : { orderBy?: CreateMessagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CreateMessagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCreateMessagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CreateMessages model
   */
  readonly fields: CreateMessagesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CreateMessages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CreateMessagesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends CreateMessages$userArgs<ExtArgs> = {}>(args?: Subset<T, CreateMessages$userArgs<ExtArgs>>): Prisma__CreateUserClient<$Result.GetResult<Prisma.$CreateUserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CreateMessages model
   */ 
  interface CreateMessagesFieldRefs {
    readonly id: FieldRef<"CreateMessages", 'Int'>
    readonly name: FieldRef<"CreateMessages", 'String'>
    readonly email: FieldRef<"CreateMessages", 'String'>
    readonly subject: FieldRef<"CreateMessages", 'String'>
    readonly userId: FieldRef<"CreateMessages", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * CreateMessages findUnique
   */
  export type CreateMessagesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateMessages
     */
    select?: CreateMessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateMessagesInclude<ExtArgs> | null
    /**
     * Filter, which CreateMessages to fetch.
     */
    where: CreateMessagesWhereUniqueInput
  }


  /**
   * CreateMessages findUniqueOrThrow
   */
  export type CreateMessagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateMessages
     */
    select?: CreateMessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateMessagesInclude<ExtArgs> | null
    /**
     * Filter, which CreateMessages to fetch.
     */
    where: CreateMessagesWhereUniqueInput
  }


  /**
   * CreateMessages findFirst
   */
  export type CreateMessagesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateMessages
     */
    select?: CreateMessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateMessagesInclude<ExtArgs> | null
    /**
     * Filter, which CreateMessages to fetch.
     */
    where?: CreateMessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreateMessages to fetch.
     */
    orderBy?: CreateMessagesOrderByWithRelationInput | CreateMessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CreateMessages.
     */
    cursor?: CreateMessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreateMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreateMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CreateMessages.
     */
    distinct?: CreateMessagesScalarFieldEnum | CreateMessagesScalarFieldEnum[]
  }


  /**
   * CreateMessages findFirstOrThrow
   */
  export type CreateMessagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateMessages
     */
    select?: CreateMessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateMessagesInclude<ExtArgs> | null
    /**
     * Filter, which CreateMessages to fetch.
     */
    where?: CreateMessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreateMessages to fetch.
     */
    orderBy?: CreateMessagesOrderByWithRelationInput | CreateMessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CreateMessages.
     */
    cursor?: CreateMessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreateMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreateMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CreateMessages.
     */
    distinct?: CreateMessagesScalarFieldEnum | CreateMessagesScalarFieldEnum[]
  }


  /**
   * CreateMessages findMany
   */
  export type CreateMessagesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateMessages
     */
    select?: CreateMessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateMessagesInclude<ExtArgs> | null
    /**
     * Filter, which CreateMessages to fetch.
     */
    where?: CreateMessagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreateMessages to fetch.
     */
    orderBy?: CreateMessagesOrderByWithRelationInput | CreateMessagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CreateMessages.
     */
    cursor?: CreateMessagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreateMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreateMessages.
     */
    skip?: number
    distinct?: CreateMessagesScalarFieldEnum | CreateMessagesScalarFieldEnum[]
  }


  /**
   * CreateMessages create
   */
  export type CreateMessagesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateMessages
     */
    select?: CreateMessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateMessagesInclude<ExtArgs> | null
    /**
     * The data needed to create a CreateMessages.
     */
    data: XOR<CreateMessagesCreateInput, CreateMessagesUncheckedCreateInput>
  }


  /**
   * CreateMessages createMany
   */
  export type CreateMessagesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CreateMessages.
     */
    data: CreateMessagesCreateManyInput | CreateMessagesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CreateMessages update
   */
  export type CreateMessagesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateMessages
     */
    select?: CreateMessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateMessagesInclude<ExtArgs> | null
    /**
     * The data needed to update a CreateMessages.
     */
    data: XOR<CreateMessagesUpdateInput, CreateMessagesUncheckedUpdateInput>
    /**
     * Choose, which CreateMessages to update.
     */
    where: CreateMessagesWhereUniqueInput
  }


  /**
   * CreateMessages updateMany
   */
  export type CreateMessagesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CreateMessages.
     */
    data: XOR<CreateMessagesUpdateManyMutationInput, CreateMessagesUncheckedUpdateManyInput>
    /**
     * Filter which CreateMessages to update
     */
    where?: CreateMessagesWhereInput
  }


  /**
   * CreateMessages upsert
   */
  export type CreateMessagesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateMessages
     */
    select?: CreateMessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateMessagesInclude<ExtArgs> | null
    /**
     * The filter to search for the CreateMessages to update in case it exists.
     */
    where: CreateMessagesWhereUniqueInput
    /**
     * In case the CreateMessages found by the `where` argument doesn't exist, create a new CreateMessages with this data.
     */
    create: XOR<CreateMessagesCreateInput, CreateMessagesUncheckedCreateInput>
    /**
     * In case the CreateMessages was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CreateMessagesUpdateInput, CreateMessagesUncheckedUpdateInput>
  }


  /**
   * CreateMessages delete
   */
  export type CreateMessagesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateMessages
     */
    select?: CreateMessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateMessagesInclude<ExtArgs> | null
    /**
     * Filter which CreateMessages to delete.
     */
    where: CreateMessagesWhereUniqueInput
  }


  /**
   * CreateMessages deleteMany
   */
  export type CreateMessagesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CreateMessages to delete
     */
    where?: CreateMessagesWhereInput
  }


  /**
   * CreateMessages.user
   */
  export type CreateMessages$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
    where?: CreateUserWhereInput
  }


  /**
   * CreateMessages without action
   */
  export type CreateMessagesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateMessages
     */
    select?: CreateMessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateMessagesInclude<ExtArgs> | null
  }



  /**
   * Model CreateUser
   */

  export type AggregateCreateUser = {
    _count: CreateUserCountAggregateOutputType | null
    _avg: CreateUserAvgAggregateOutputType | null
    _sum: CreateUserSumAggregateOutputType | null
    _min: CreateUserMinAggregateOutputType | null
    _max: CreateUserMaxAggregateOutputType | null
  }

  export type CreateUserAvgAggregateOutputType = {
    id: number | null
  }

  export type CreateUserSumAggregateOutputType = {
    id: number | null
  }

  export type CreateUserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    admin: boolean | null
  }

  export type CreateUserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    admin: boolean | null
  }

  export type CreateUserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    admin: number
    _all: number
  }


  export type CreateUserAvgAggregateInputType = {
    id?: true
  }

  export type CreateUserSumAggregateInputType = {
    id?: true
  }

  export type CreateUserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    admin?: true
  }

  export type CreateUserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    admin?: true
  }

  export type CreateUserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    admin?: true
    _all?: true
  }

  export type CreateUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CreateUser to aggregate.
     */
    where?: CreateUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreateUsers to fetch.
     */
    orderBy?: CreateUserOrderByWithRelationInput | CreateUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CreateUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreateUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreateUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CreateUsers
    **/
    _count?: true | CreateUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CreateUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CreateUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CreateUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CreateUserMaxAggregateInputType
  }

  export type GetCreateUserAggregateType<T extends CreateUserAggregateArgs> = {
        [P in keyof T & keyof AggregateCreateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCreateUser[P]>
      : GetScalarType<T[P], AggregateCreateUser[P]>
  }




  export type CreateUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CreateUserWhereInput
    orderBy?: CreateUserOrderByWithAggregationInput | CreateUserOrderByWithAggregationInput[]
    by: CreateUserScalarFieldEnum[] | CreateUserScalarFieldEnum
    having?: CreateUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CreateUserCountAggregateInputType | true
    _avg?: CreateUserAvgAggregateInputType
    _sum?: CreateUserSumAggregateInputType
    _min?: CreateUserMinAggregateInputType
    _max?: CreateUserMaxAggregateInputType
  }

  export type CreateUserGroupByOutputType = {
    id: number
    email: string
    password: string
    admin: boolean
    _count: CreateUserCountAggregateOutputType | null
    _avg: CreateUserAvgAggregateOutputType | null
    _sum: CreateUserSumAggregateOutputType | null
    _min: CreateUserMinAggregateOutputType | null
    _max: CreateUserMaxAggregateOutputType | null
  }

  type GetCreateUserGroupByPayload<T extends CreateUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CreateUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CreateUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CreateUserGroupByOutputType[P]>
            : GetScalarType<T[P], CreateUserGroupByOutputType[P]>
        }
      >
    >


  export type CreateUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    admin?: boolean
    messages?: boolean | CreateUser$messagesArgs<ExtArgs>
    _count?: boolean | CreateUserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["createUser"]>

  export type CreateUserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    admin?: boolean
  }

  export type CreateUserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | CreateUser$messagesArgs<ExtArgs>
    _count?: boolean | CreateUserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CreateUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CreateUser"
    objects: {
      messages: Prisma.$CreateMessagesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      admin: boolean
    }, ExtArgs["result"]["createUser"]>
    composites: {}
  }


  type CreateUserGetPayload<S extends boolean | null | undefined | CreateUserDefaultArgs> = $Result.GetResult<Prisma.$CreateUserPayload, S>

  type CreateUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CreateUserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CreateUserCountAggregateInputType | true
    }

  export interface CreateUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CreateUser'], meta: { name: 'CreateUser' } }
    /**
     * Find zero or one CreateUser that matches the filter.
     * @param {CreateUserFindUniqueArgs} args - Arguments to find a CreateUser
     * @example
     * // Get one CreateUser
     * const createUser = await prisma.createUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CreateUserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CreateUserFindUniqueArgs<ExtArgs>>
    ): Prisma__CreateUserClient<$Result.GetResult<Prisma.$CreateUserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CreateUser that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CreateUserFindUniqueOrThrowArgs} args - Arguments to find a CreateUser
     * @example
     * // Get one CreateUser
     * const createUser = await prisma.createUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CreateUserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CreateUserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CreateUserClient<$Result.GetResult<Prisma.$CreateUserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CreateUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreateUserFindFirstArgs} args - Arguments to find a CreateUser
     * @example
     * // Get one CreateUser
     * const createUser = await prisma.createUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CreateUserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CreateUserFindFirstArgs<ExtArgs>>
    ): Prisma__CreateUserClient<$Result.GetResult<Prisma.$CreateUserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CreateUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreateUserFindFirstOrThrowArgs} args - Arguments to find a CreateUser
     * @example
     * // Get one CreateUser
     * const createUser = await prisma.createUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CreateUserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CreateUserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CreateUserClient<$Result.GetResult<Prisma.$CreateUserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CreateUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreateUserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CreateUsers
     * const createUsers = await prisma.createUser.findMany()
     * 
     * // Get first 10 CreateUsers
     * const createUsers = await prisma.createUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const createUserWithIdOnly = await prisma.createUser.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CreateUserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CreateUserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreateUserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CreateUser.
     * @param {CreateUserCreateArgs} args - Arguments to create a CreateUser.
     * @example
     * // Create one CreateUser
     * const CreateUser = await prisma.createUser.create({
     *   data: {
     *     // ... data to create a CreateUser
     *   }
     * })
     * 
    **/
    create<T extends CreateUserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CreateUserCreateArgs<ExtArgs>>
    ): Prisma__CreateUserClient<$Result.GetResult<Prisma.$CreateUserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CreateUsers.
     *     @param {CreateUserCreateManyArgs} args - Arguments to create many CreateUsers.
     *     @example
     *     // Create many CreateUsers
     *     const createUser = await prisma.createUser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CreateUserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CreateUserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CreateUser.
     * @param {CreateUserDeleteArgs} args - Arguments to delete one CreateUser.
     * @example
     * // Delete one CreateUser
     * const CreateUser = await prisma.createUser.delete({
     *   where: {
     *     // ... filter to delete one CreateUser
     *   }
     * })
     * 
    **/
    delete<T extends CreateUserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CreateUserDeleteArgs<ExtArgs>>
    ): Prisma__CreateUserClient<$Result.GetResult<Prisma.$CreateUserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CreateUser.
     * @param {CreateUserUpdateArgs} args - Arguments to update one CreateUser.
     * @example
     * // Update one CreateUser
     * const createUser = await prisma.createUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CreateUserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CreateUserUpdateArgs<ExtArgs>>
    ): Prisma__CreateUserClient<$Result.GetResult<Prisma.$CreateUserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CreateUsers.
     * @param {CreateUserDeleteManyArgs} args - Arguments to filter CreateUsers to delete.
     * @example
     * // Delete a few CreateUsers
     * const { count } = await prisma.createUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CreateUserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CreateUserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CreateUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreateUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CreateUsers
     * const createUser = await prisma.createUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CreateUserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CreateUserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CreateUser.
     * @param {CreateUserUpsertArgs} args - Arguments to update or create a CreateUser.
     * @example
     * // Update or create a CreateUser
     * const createUser = await prisma.createUser.upsert({
     *   create: {
     *     // ... data to create a CreateUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CreateUser we want to update
     *   }
     * })
    **/
    upsert<T extends CreateUserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CreateUserUpsertArgs<ExtArgs>>
    ): Prisma__CreateUserClient<$Result.GetResult<Prisma.$CreateUserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CreateUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreateUserCountArgs} args - Arguments to filter CreateUsers to count.
     * @example
     * // Count the number of CreateUsers
     * const count = await prisma.createUser.count({
     *   where: {
     *     // ... the filter for the CreateUsers we want to count
     *   }
     * })
    **/
    count<T extends CreateUserCountArgs>(
      args?: Subset<T, CreateUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CreateUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CreateUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreateUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CreateUserAggregateArgs>(args: Subset<T, CreateUserAggregateArgs>): Prisma.PrismaPromise<GetCreateUserAggregateType<T>>

    /**
     * Group by CreateUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreateUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CreateUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CreateUserGroupByArgs['orderBy'] }
        : { orderBy?: CreateUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CreateUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCreateUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CreateUser model
   */
  readonly fields: CreateUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CreateUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CreateUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    messages<T extends CreateUser$messagesArgs<ExtArgs> = {}>(args?: Subset<T, CreateUser$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreateMessagesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CreateUser model
   */ 
  interface CreateUserFieldRefs {
    readonly id: FieldRef<"CreateUser", 'Int'>
    readonly email: FieldRef<"CreateUser", 'String'>
    readonly password: FieldRef<"CreateUser", 'String'>
    readonly admin: FieldRef<"CreateUser", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * CreateUser findUnique
   */
  export type CreateUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
    /**
     * Filter, which CreateUser to fetch.
     */
    where: CreateUserWhereUniqueInput
  }


  /**
   * CreateUser findUniqueOrThrow
   */
  export type CreateUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
    /**
     * Filter, which CreateUser to fetch.
     */
    where: CreateUserWhereUniqueInput
  }


  /**
   * CreateUser findFirst
   */
  export type CreateUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
    /**
     * Filter, which CreateUser to fetch.
     */
    where?: CreateUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreateUsers to fetch.
     */
    orderBy?: CreateUserOrderByWithRelationInput | CreateUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CreateUsers.
     */
    cursor?: CreateUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreateUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreateUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CreateUsers.
     */
    distinct?: CreateUserScalarFieldEnum | CreateUserScalarFieldEnum[]
  }


  /**
   * CreateUser findFirstOrThrow
   */
  export type CreateUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
    /**
     * Filter, which CreateUser to fetch.
     */
    where?: CreateUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreateUsers to fetch.
     */
    orderBy?: CreateUserOrderByWithRelationInput | CreateUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CreateUsers.
     */
    cursor?: CreateUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreateUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreateUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CreateUsers.
     */
    distinct?: CreateUserScalarFieldEnum | CreateUserScalarFieldEnum[]
  }


  /**
   * CreateUser findMany
   */
  export type CreateUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
    /**
     * Filter, which CreateUsers to fetch.
     */
    where?: CreateUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreateUsers to fetch.
     */
    orderBy?: CreateUserOrderByWithRelationInput | CreateUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CreateUsers.
     */
    cursor?: CreateUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreateUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreateUsers.
     */
    skip?: number
    distinct?: CreateUserScalarFieldEnum | CreateUserScalarFieldEnum[]
  }


  /**
   * CreateUser create
   */
  export type CreateUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
    /**
     * The data needed to create a CreateUser.
     */
    data: XOR<CreateUserCreateInput, CreateUserUncheckedCreateInput>
  }


  /**
   * CreateUser createMany
   */
  export type CreateUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CreateUsers.
     */
    data: CreateUserCreateManyInput | CreateUserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CreateUser update
   */
  export type CreateUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
    /**
     * The data needed to update a CreateUser.
     */
    data: XOR<CreateUserUpdateInput, CreateUserUncheckedUpdateInput>
    /**
     * Choose, which CreateUser to update.
     */
    where: CreateUserWhereUniqueInput
  }


  /**
   * CreateUser updateMany
   */
  export type CreateUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CreateUsers.
     */
    data: XOR<CreateUserUpdateManyMutationInput, CreateUserUncheckedUpdateManyInput>
    /**
     * Filter which CreateUsers to update
     */
    where?: CreateUserWhereInput
  }


  /**
   * CreateUser upsert
   */
  export type CreateUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
    /**
     * The filter to search for the CreateUser to update in case it exists.
     */
    where: CreateUserWhereUniqueInput
    /**
     * In case the CreateUser found by the `where` argument doesn't exist, create a new CreateUser with this data.
     */
    create: XOR<CreateUserCreateInput, CreateUserUncheckedCreateInput>
    /**
     * In case the CreateUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CreateUserUpdateInput, CreateUserUncheckedUpdateInput>
  }


  /**
   * CreateUser delete
   */
  export type CreateUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
    /**
     * Filter which CreateUser to delete.
     */
    where: CreateUserWhereUniqueInput
  }


  /**
   * CreateUser deleteMany
   */
  export type CreateUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CreateUsers to delete
     */
    where?: CreateUserWhereInput
  }


  /**
   * CreateUser.messages
   */
  export type CreateUser$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateMessages
     */
    select?: CreateMessagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateMessagesInclude<ExtArgs> | null
    where?: CreateMessagesWhereInput
    orderBy?: CreateMessagesOrderByWithRelationInput | CreateMessagesOrderByWithRelationInput[]
    cursor?: CreateMessagesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CreateMessagesScalarFieldEnum | CreateMessagesScalarFieldEnum[]
  }


  /**
   * CreateUser without action
   */
  export type CreateUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreateUser
     */
    select?: CreateUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CreateUserInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CreateMessagesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    subject: 'subject',
    userId: 'userId'
  };

  export type CreateMessagesScalarFieldEnum = (typeof CreateMessagesScalarFieldEnum)[keyof typeof CreateMessagesScalarFieldEnum]


  export const CreateUserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    admin: 'admin'
  };

  export type CreateUserScalarFieldEnum = (typeof CreateUserScalarFieldEnum)[keyof typeof CreateUserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type CreateMessagesWhereInput = {
    AND?: CreateMessagesWhereInput | CreateMessagesWhereInput[]
    OR?: CreateMessagesWhereInput[]
    NOT?: CreateMessagesWhereInput | CreateMessagesWhereInput[]
    id?: IntFilter<"CreateMessages"> | number
    name?: StringFilter<"CreateMessages"> | string
    email?: StringFilter<"CreateMessages"> | string
    subject?: StringFilter<"CreateMessages"> | string
    userId?: IntNullableFilter<"CreateMessages"> | number | null
    user?: XOR<CreateUserNullableRelationFilter, CreateUserWhereInput> | null
  }

  export type CreateMessagesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    subject?: SortOrder
    userId?: SortOrderInput | SortOrder
    user?: CreateUserOrderByWithRelationInput
  }

  export type CreateMessagesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: CreateMessagesWhereInput | CreateMessagesWhereInput[]
    OR?: CreateMessagesWhereInput[]
    NOT?: CreateMessagesWhereInput | CreateMessagesWhereInput[]
    name?: StringFilter<"CreateMessages"> | string
    subject?: StringFilter<"CreateMessages"> | string
    userId?: IntNullableFilter<"CreateMessages"> | number | null
    user?: XOR<CreateUserNullableRelationFilter, CreateUserWhereInput> | null
  }, "id" | "email">

  export type CreateMessagesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    subject?: SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: CreateMessagesCountOrderByAggregateInput
    _avg?: CreateMessagesAvgOrderByAggregateInput
    _max?: CreateMessagesMaxOrderByAggregateInput
    _min?: CreateMessagesMinOrderByAggregateInput
    _sum?: CreateMessagesSumOrderByAggregateInput
  }

  export type CreateMessagesScalarWhereWithAggregatesInput = {
    AND?: CreateMessagesScalarWhereWithAggregatesInput | CreateMessagesScalarWhereWithAggregatesInput[]
    OR?: CreateMessagesScalarWhereWithAggregatesInput[]
    NOT?: CreateMessagesScalarWhereWithAggregatesInput | CreateMessagesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CreateMessages"> | number
    name?: StringWithAggregatesFilter<"CreateMessages"> | string
    email?: StringWithAggregatesFilter<"CreateMessages"> | string
    subject?: StringWithAggregatesFilter<"CreateMessages"> | string
    userId?: IntNullableWithAggregatesFilter<"CreateMessages"> | number | null
  }

  export type CreateUserWhereInput = {
    AND?: CreateUserWhereInput | CreateUserWhereInput[]
    OR?: CreateUserWhereInput[]
    NOT?: CreateUserWhereInput | CreateUserWhereInput[]
    id?: IntFilter<"CreateUser"> | number
    email?: StringFilter<"CreateUser"> | string
    password?: StringFilter<"CreateUser"> | string
    admin?: BoolFilter<"CreateUser"> | boolean
    messages?: CreateMessagesListRelationFilter
  }

  export type CreateUserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    admin?: SortOrder
    messages?: CreateMessagesOrderByRelationAggregateInput
  }

  export type CreateUserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: CreateUserWhereInput | CreateUserWhereInput[]
    OR?: CreateUserWhereInput[]
    NOT?: CreateUserWhereInput | CreateUserWhereInput[]
    password?: StringFilter<"CreateUser"> | string
    admin?: BoolFilter<"CreateUser"> | boolean
    messages?: CreateMessagesListRelationFilter
  }, "id" | "email">

  export type CreateUserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    admin?: SortOrder
    _count?: CreateUserCountOrderByAggregateInput
    _avg?: CreateUserAvgOrderByAggregateInput
    _max?: CreateUserMaxOrderByAggregateInput
    _min?: CreateUserMinOrderByAggregateInput
    _sum?: CreateUserSumOrderByAggregateInput
  }

  export type CreateUserScalarWhereWithAggregatesInput = {
    AND?: CreateUserScalarWhereWithAggregatesInput | CreateUserScalarWhereWithAggregatesInput[]
    OR?: CreateUserScalarWhereWithAggregatesInput[]
    NOT?: CreateUserScalarWhereWithAggregatesInput | CreateUserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CreateUser"> | number
    email?: StringWithAggregatesFilter<"CreateUser"> | string
    password?: StringWithAggregatesFilter<"CreateUser"> | string
    admin?: BoolWithAggregatesFilter<"CreateUser"> | boolean
  }

  export type CreateMessagesCreateInput = {
    name?: string
    email: string
    subject: string
    user?: CreateUserCreateNestedOneWithoutMessagesInput
  }

  export type CreateMessagesUncheckedCreateInput = {
    id?: number
    name?: string
    email: string
    subject: string
    userId?: number | null
  }

  export type CreateMessagesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    user?: CreateUserUpdateOneWithoutMessagesNestedInput
  }

  export type CreateMessagesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CreateMessagesCreateManyInput = {
    id?: number
    name?: string
    email: string
    subject: string
    userId?: number | null
  }

  export type CreateMessagesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type CreateMessagesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CreateUserCreateInput = {
    email: string
    password: string
    admin: boolean
    messages?: CreateMessagesCreateNestedManyWithoutUserInput
  }

  export type CreateUserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    admin: boolean
    messages?: CreateMessagesUncheckedCreateNestedManyWithoutUserInput
  }

  export type CreateUserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    messages?: CreateMessagesUpdateManyWithoutUserNestedInput
  }

  export type CreateUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
    messages?: CreateMessagesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CreateUserCreateManyInput = {
    id?: number
    email: string
    password: string
    admin: boolean
  }

  export type CreateUserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CreateUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CreateUserNullableRelationFilter = {
    is?: CreateUserWhereInput | null
    isNot?: CreateUserWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CreateMessagesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    subject?: SortOrder
    userId?: SortOrder
  }

  export type CreateMessagesAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type CreateMessagesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    subject?: SortOrder
    userId?: SortOrder
  }

  export type CreateMessagesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    subject?: SortOrder
    userId?: SortOrder
  }

  export type CreateMessagesSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CreateMessagesListRelationFilter = {
    every?: CreateMessagesWhereInput
    some?: CreateMessagesWhereInput
    none?: CreateMessagesWhereInput
  }

  export type CreateMessagesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CreateUserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    admin?: SortOrder
  }

  export type CreateUserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CreateUserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    admin?: SortOrder
  }

  export type CreateUserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    admin?: SortOrder
  }

  export type CreateUserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CreateUserCreateNestedOneWithoutMessagesInput = {
    create?: XOR<CreateUserCreateWithoutMessagesInput, CreateUserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: CreateUserCreateOrConnectWithoutMessagesInput
    connect?: CreateUserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type CreateUserUpdateOneWithoutMessagesNestedInput = {
    create?: XOR<CreateUserCreateWithoutMessagesInput, CreateUserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: CreateUserCreateOrConnectWithoutMessagesInput
    upsert?: CreateUserUpsertWithoutMessagesInput
    disconnect?: CreateUserWhereInput | boolean
    delete?: CreateUserWhereInput | boolean
    connect?: CreateUserWhereUniqueInput
    update?: XOR<XOR<CreateUserUpdateToOneWithWhereWithoutMessagesInput, CreateUserUpdateWithoutMessagesInput>, CreateUserUncheckedUpdateWithoutMessagesInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CreateMessagesCreateNestedManyWithoutUserInput = {
    create?: XOR<CreateMessagesCreateWithoutUserInput, CreateMessagesUncheckedCreateWithoutUserInput> | CreateMessagesCreateWithoutUserInput[] | CreateMessagesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CreateMessagesCreateOrConnectWithoutUserInput | CreateMessagesCreateOrConnectWithoutUserInput[]
    createMany?: CreateMessagesCreateManyUserInputEnvelope
    connect?: CreateMessagesWhereUniqueInput | CreateMessagesWhereUniqueInput[]
  }

  export type CreateMessagesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CreateMessagesCreateWithoutUserInput, CreateMessagesUncheckedCreateWithoutUserInput> | CreateMessagesCreateWithoutUserInput[] | CreateMessagesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CreateMessagesCreateOrConnectWithoutUserInput | CreateMessagesCreateOrConnectWithoutUserInput[]
    createMany?: CreateMessagesCreateManyUserInputEnvelope
    connect?: CreateMessagesWhereUniqueInput | CreateMessagesWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CreateMessagesUpdateManyWithoutUserNestedInput = {
    create?: XOR<CreateMessagesCreateWithoutUserInput, CreateMessagesUncheckedCreateWithoutUserInput> | CreateMessagesCreateWithoutUserInput[] | CreateMessagesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CreateMessagesCreateOrConnectWithoutUserInput | CreateMessagesCreateOrConnectWithoutUserInput[]
    upsert?: CreateMessagesUpsertWithWhereUniqueWithoutUserInput | CreateMessagesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CreateMessagesCreateManyUserInputEnvelope
    set?: CreateMessagesWhereUniqueInput | CreateMessagesWhereUniqueInput[]
    disconnect?: CreateMessagesWhereUniqueInput | CreateMessagesWhereUniqueInput[]
    delete?: CreateMessagesWhereUniqueInput | CreateMessagesWhereUniqueInput[]
    connect?: CreateMessagesWhereUniqueInput | CreateMessagesWhereUniqueInput[]
    update?: CreateMessagesUpdateWithWhereUniqueWithoutUserInput | CreateMessagesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CreateMessagesUpdateManyWithWhereWithoutUserInput | CreateMessagesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CreateMessagesScalarWhereInput | CreateMessagesScalarWhereInput[]
  }

  export type CreateMessagesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CreateMessagesCreateWithoutUserInput, CreateMessagesUncheckedCreateWithoutUserInput> | CreateMessagesCreateWithoutUserInput[] | CreateMessagesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CreateMessagesCreateOrConnectWithoutUserInput | CreateMessagesCreateOrConnectWithoutUserInput[]
    upsert?: CreateMessagesUpsertWithWhereUniqueWithoutUserInput | CreateMessagesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CreateMessagesCreateManyUserInputEnvelope
    set?: CreateMessagesWhereUniqueInput | CreateMessagesWhereUniqueInput[]
    disconnect?: CreateMessagesWhereUniqueInput | CreateMessagesWhereUniqueInput[]
    delete?: CreateMessagesWhereUniqueInput | CreateMessagesWhereUniqueInput[]
    connect?: CreateMessagesWhereUniqueInput | CreateMessagesWhereUniqueInput[]
    update?: CreateMessagesUpdateWithWhereUniqueWithoutUserInput | CreateMessagesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CreateMessagesUpdateManyWithWhereWithoutUserInput | CreateMessagesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CreateMessagesScalarWhereInput | CreateMessagesScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CreateUserCreateWithoutMessagesInput = {
    email: string
    password: string
    admin: boolean
  }

  export type CreateUserUncheckedCreateWithoutMessagesInput = {
    id?: number
    email: string
    password: string
    admin: boolean
  }

  export type CreateUserCreateOrConnectWithoutMessagesInput = {
    where: CreateUserWhereUniqueInput
    create: XOR<CreateUserCreateWithoutMessagesInput, CreateUserUncheckedCreateWithoutMessagesInput>
  }

  export type CreateUserUpsertWithoutMessagesInput = {
    update: XOR<CreateUserUpdateWithoutMessagesInput, CreateUserUncheckedUpdateWithoutMessagesInput>
    create: XOR<CreateUserCreateWithoutMessagesInput, CreateUserUncheckedCreateWithoutMessagesInput>
    where?: CreateUserWhereInput
  }

  export type CreateUserUpdateToOneWithWhereWithoutMessagesInput = {
    where?: CreateUserWhereInput
    data: XOR<CreateUserUpdateWithoutMessagesInput, CreateUserUncheckedUpdateWithoutMessagesInput>
  }

  export type CreateUserUpdateWithoutMessagesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CreateUserUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    admin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CreateMessagesCreateWithoutUserInput = {
    name?: string
    email: string
    subject: string
  }

  export type CreateMessagesUncheckedCreateWithoutUserInput = {
    id?: number
    name?: string
    email: string
    subject: string
  }

  export type CreateMessagesCreateOrConnectWithoutUserInput = {
    where: CreateMessagesWhereUniqueInput
    create: XOR<CreateMessagesCreateWithoutUserInput, CreateMessagesUncheckedCreateWithoutUserInput>
  }

  export type CreateMessagesCreateManyUserInputEnvelope = {
    data: CreateMessagesCreateManyUserInput | CreateMessagesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CreateMessagesUpsertWithWhereUniqueWithoutUserInput = {
    where: CreateMessagesWhereUniqueInput
    update: XOR<CreateMessagesUpdateWithoutUserInput, CreateMessagesUncheckedUpdateWithoutUserInput>
    create: XOR<CreateMessagesCreateWithoutUserInput, CreateMessagesUncheckedCreateWithoutUserInput>
  }

  export type CreateMessagesUpdateWithWhereUniqueWithoutUserInput = {
    where: CreateMessagesWhereUniqueInput
    data: XOR<CreateMessagesUpdateWithoutUserInput, CreateMessagesUncheckedUpdateWithoutUserInput>
  }

  export type CreateMessagesUpdateManyWithWhereWithoutUserInput = {
    where: CreateMessagesScalarWhereInput
    data: XOR<CreateMessagesUpdateManyMutationInput, CreateMessagesUncheckedUpdateManyWithoutUserInput>
  }

  export type CreateMessagesScalarWhereInput = {
    AND?: CreateMessagesScalarWhereInput | CreateMessagesScalarWhereInput[]
    OR?: CreateMessagesScalarWhereInput[]
    NOT?: CreateMessagesScalarWhereInput | CreateMessagesScalarWhereInput[]
    id?: IntFilter<"CreateMessages"> | number
    name?: StringFilter<"CreateMessages"> | string
    email?: StringFilter<"CreateMessages"> | string
    subject?: StringFilter<"CreateMessages"> | string
    userId?: IntNullableFilter<"CreateMessages"> | number | null
  }

  export type CreateMessagesCreateManyUserInput = {
    id?: number
    name?: string
    email: string
    subject: string
  }

  export type CreateMessagesUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type CreateMessagesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
  }

  export type CreateMessagesUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CreateUserCountOutputTypeDefaultArgs instead
     */
    export type CreateUserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CreateUserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CreateMessagesDefaultArgs instead
     */
    export type CreateMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CreateMessagesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CreateUserDefaultArgs instead
     */
    export type CreateUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CreateUserDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}